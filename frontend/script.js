// Chapter content data
const chapters = {
    intro: {
        title: "–í–≤–µ–¥–µ–Ω–∏–µ",
        content: `
            <h1>üöÄ Haskell –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞</h1>
            <h2>–£–≥–ª—É–±–∏—Ç–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
            
            <div class="intro-highlight">
                <h3>üéØ –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏!</h3>
                <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–¥–µ–π:</p>
                <ul>
                    <li>üõ°Ô∏è <strong>Kotlin null safety</strong> - Optional –∏–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤</li>
                    <li>‚ö° <strong>Swift Combine, Kotlin Flow</strong> - –º–æ–Ω–∞–¥—ã –≤ –¥–µ–π—Å—Ç–≤–∏–∏</li>
                    <li>üîÑ <strong>Redux, MVI –ø–∞—Ç—Ç–µ—Ä–Ω—ã</strong> - –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏</li>
                    <li>üé® <strong>SwiftUI, Compose</strong> - –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥</li>
                    <li>üß© <strong>–ö–æ—Ä—É—Ç–∏–Ω—ã, async/await</strong> - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å</li>
                </ul>
                <p><em>–ù–æ —á—Ç–æ –µ—Å–ª–∏ –ø–æ–Ω—è—Ç—å —ç—Ç–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –Ω–∞ –≥–ª—É–±–∏–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å –µ—â–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ?</em></p>
            </div>

            <h2>üéØ Haskell - –≤–∞—à–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ</h2>
            
            <h3>–ß—Ç–æ —Ç–∞–∫–æ–µ Haskell?</h3>
            <p><strong>Haskell</strong> - —ç—Ç–æ —è–∑—ã–∫ <em>—á–∏—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è</em>, –≥–¥–µ:</p>
            <ul>
                <li>üîí <strong>–ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å</strong> - –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ</li>
                <li>‚ú® <strong>–ß–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</strong> - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—Ö–æ–¥ –≤—Å–µ–≥–¥–∞ –¥–∞–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –≤—ã—Ö–æ–¥</li>
                <li>üõ°Ô∏è <strong>–¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</strong> - –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞</li>
                <li>üîó <strong>–ö–æ–º–ø–æ–∑–∏—Ü–∏—è</strong> - —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö —á–∞—Å—Ç–µ–π</li>
            </ul>

            <h3>üé™ –ú–∞–≥–∏—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏</h3>
            <p>–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –ø–∏—à–µ—Ç–µ –∫–æ–¥, –≥–¥–µ <strong>–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ</strong> –ø–æ–ª—É—á–∏—Ç—å NPE, –≥–¥–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å <strong>–±–µ–∑–æ–ø–∞—Å–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</strong>, –≥–¥–µ –±–∞–≥–∏ <strong>–ª–æ–≤—è—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏</strong>!</p>

            <h2>üí° –ó–∞—á–µ–º Haskell –º–æ–±–∏–ª—å–Ω–æ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É?</h2>

            <h3>üß† –≠–≤–æ–ª—é—Ü–∏—è –º—ã—à–ª–µ–Ω–∏—è</h3>
            <div class="comparison-block">
                <div class="before-after">
                    <div class="before">
                        <h4>‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Kotlin (—É–∂–µ —Ö–æ—Ä–æ—à–æ):</h4>
                        <pre><code class="language-kotlin">// Kotlin - null safety –∏ –∫–æ—Ä—É—Ç–∏–Ω—ã
suspend fun loadUsers(): List<User> {
    return try {
        val response = apiService.getUsers()
        response.map { it.toUser() }
    } catch (e: Exception) {
        emptyList()
    }
}</code></pre>
                    </div>
                    <div class="after">
                        <h4>üöÄ Haskell —Å—Ç–∏–ª—å (–µ—â–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–µ–µ):</h4>
                        <pre><code class="language-haskell">-- Haskell - –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
loadUsers :: IO (Either ApiError [User])
loadUsers = do
  response <- getUsers
  return $ fmap parseUser <$> response
  -- –û—à–∏–±–∫–∏ –≤ —Ç–∏–ø–∞—Ö, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π</code></pre>
                    </div>
                </div>
            </div>

            <h3>üîÑ –£–≥–ª—É–±–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞–Ω–∏–π</h3>
            
            <div class="application-examples">
                <div class="example-card">
                    <h4>üì± State Management</h4>
                    <p>–£–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ <strong>Redux, MVI, Compose State</strong>? Haskell –ø–æ–∫–∞–∂–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Å–Ω–æ–≤—É —ç—Ç–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –Ω–∞—É—á–∏—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏.</p>
                </div>
                
                <div class="example-card">
                    <h4>üåä Reactive Programming</h4>
                    <p>–†–∞–±–æ—Ç–∞–µ—Ç–µ —Å <strong>Flow, Combine, RxJava</strong>? –ü–æ–π–º–µ—Ç–µ, —á—Ç–æ —Ç–∞–∫–æ–µ –º–æ–Ω–∞–¥—ã –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏ –∫–∞–∫ –∏—Ö –ø—Ä–∏–º–µ–Ω—è—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.</p>
                </div>
                
                <div class="example-card">
                    <h4>üé® –î–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π UI</h4>
                    <p>–ó–Ω–∞–∫–æ–º—ã —Å <strong>SwiftUI, Jetpack Compose</strong>? –ò–∑—É—á–∏—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–¥–µ–ª–∞–ª–∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã–º–∏.</p>
                </div>
                
                <div class="example-card">
                    <h4>üîí –¢–∏–ø–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
                    <p>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ <strong>Kotlin null safety, Swift Optionals</strong>? –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –µ—â–µ –±–æ–ª–µ–µ –º–æ—â–Ω—ã–µ —Ç–∏–ø–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã.</p>
                </div>
            </div>

            <h2>üéØ –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞?</h2>

            <div class="benefits-grid">
                <div class="benefit">
                    <h4>üß© –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ</h4>
                    <p>–ù–∞—É—á–∏—Ç–µ—Å—å –≤–∏–¥–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞ Redux, MVI –∏ –¥—Ä—É–≥–∏–º–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</p>
                </div>
                
                <div class="benefit">
                    <h4>üõ°Ô∏è –¢–∏–ø–æ–≤–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ</h4>
                    <p>–û—Å–≤–æ–∏—Ç–µ advanced —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ–≤—ã—Ä–∞–∑–∏–º—ã–º–∏ –≤ –∫–æ–¥–µ</p>
                </div>
                
                <div class="benefit">
                    <h4>‚ö° –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏</h4>
                    <p>–ü–æ–π–º–µ—Ç–µ –º–æ–Ω–∞–¥—ã, —Ñ—É–Ω–∫—Ç–æ—Ä—ã –∏ –∞–ø–ø–ª–∏–∫–∞—Ç–∏–≤—ã –Ω–µ –∫–∞–∫ –º–∞–≥–∏—é, –∞ –∫–∞–∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</p>
                </div>
                
                <div class="benefit">
                    <h4>üîß –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç</h4>
                    <p>–°–æ–∑–¥–∞–¥–∏—Ç–µ <strong>Mobile Development Assistant</strong> - –º–æ—â–Ω—É—é CLI —É—Ç–∏–ª–∏—Ç—É –Ω–∞ —á–∏—Å—Ç–æ–º Haskell</p>
                </div>
            </div>

            <h2>üö¶ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è</h2>
            
            <div class="journey-roadmap">
                <div class="roadmap-step">
                    <span class="step-number">1Ô∏è‚É£</span>
                    <div class="step-content">
                        <h4>–û—Å–Ω–æ–≤—ã Haskell</h4>
                        <p>–°–∏–Ω—Ç–∞–∫—Å–∏—Å, —Ç–∏–ø—ã, —Ñ—É–Ω–∫—Ü–∏–∏ - —Å—Ç—Ä–æ–∏–º —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç</p>
                    </div>
                </div>
                
                <div class="roadmap-step">
                    <span class="step-number">2Ô∏è‚É£</span>
                    <div class="step-content">
                        <h4>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ</h4>
                        <p>–ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –≤—ã—Å—à–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏</p>
                    </div>
                </div>
                
                <div class="roadmap-step">
                    <span class="step-number">3Ô∏è‚É£</span>
                    <div class="step-content">
                        <h4>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ</h4>
                        <p>–ü–∞—Ä—Å–∏–Ω–≥, IO, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
                    </div>
                </div>
                
                <div class="roadmap-step">
                    <span class="step-number">4Ô∏è‚É£</span>
                    <div class="step-content">
                        <h4>–ú–æ—Å—Ç –≤ –º–æ–±–∏–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É</h4>
                        <p>–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –≤ iOS, Android, Flutter</p>
                    </div>
                </div>
            </div>

            <div class="call-to-action">
                <h3>üé¨ –ì–æ—Ç–æ–≤—ã —É–≥–ª—É–±–∏—Ç—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ?</h3>
                <p>–í—ã —É–∂–µ —Ö–æ—Ä–æ—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –¢–µ–ø–µ—Ä—å —Å—Ç–∞–Ω—å—Ç–µ <strong>–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–º</strong>! –ü–æ–π–º–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã —Ç–æ–≥–æ, —á—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.</p>
                <p><em>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–¥–∞!</em> üöÄ</p>
            </div>

            <div class="pro-tip">
                <h4>üí° –°–æ–≤–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞</h4>
                <p>Haskell –¥–æ–ø–æ–ª–Ω–∏—Ç –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è Kotlin/Swift, –∞ –Ω–µ –∑–∞–º–µ–Ω–∏—Ç –∏—Ö. –ö–∞–∂–¥–∞—è –∏–∑—É—á–µ–Ω–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è —Å–¥–µ–ª–∞–µ—Ç –≤–∞—Å –ª—É—á—à–µ –≤ –≤–∞—à–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º —è–∑—ã–∫–µ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤!</p>
            </div>
        `
    },
    ch1: {
        title: "1. Hello, Web Server",
        content: `
            <h1>1. Hello, Web Server</h1>
            <p>üéØ <strong>–¶–µ–ª—å:</strong> –°–æ–∑–¥–∞—Ç—å —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Haskell</p>
            
            <h2>üöÄ –ß—Ç–æ –º—ã –±—É–¥–µ–º —Å—Ç—Ä–æ–∏—Ç—å</h2>
            <p>–í —ç—Ç–æ–º –∫—É—Ä—Å–µ –º—ã –ø–æ—à–∞–≥–æ–≤–æ —Å–æ–∑–¥–∞–¥–∏–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –Ω–∞—à–µ–π –∫–Ω–∏–≥–∏ –ø–æ Haskell. –ö–∞–∂–¥–∞—è –≥–ª–∞–≤–∞ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:</p>
            
            <div class="roadmap-step">
                <span class="step-number">üìö</span>
                <div class="step-content">
                    <h4>–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h4>
                    <p>–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–∞–≤–∞–º–∏, –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</p>
                </div>
            </div>

            <h2>üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è</h2>
            <p>–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</p>
            <ul>
                <li><strong>GHC</strong> - –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä Haskell</li>
                <li><strong>Cabal</strong> - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–æ–≤</li>
                <li><strong>Stack</strong> - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤</li>
            </ul>

            <h3>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ GHCup</h3>
            <pre><code class="language-bash"># –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GHCup (–º–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π Haskell)
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞, –∑–∞—Ç–µ–º:
ghcup install ghc 9.4.7
ghcup install cabal 3.8.1.0
ghcup install stack 2.11.1</code></pre>

            <h2>üéØ –ù–∞—à–∞ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç–µ–π—à–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç "Hello, World!":</p>
            
            <pre><code class="language-haskell">-- Main.hs
{-# LANGUAGE OverloadedStrings #-}
import Network.HTTP.Simple

main :: IO ()
main = do
    putStrLn "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä..."
    putStrLn "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8080"
    -- –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    putStrLn "Hello, Web Server!"</code></pre>

            <h2>üèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–∞—à–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞:</p>
            
            <pre><code class="language-bash">mkdir haskell-book-server
cd haskell-book-server
cabal init --simple
</code></pre>

            <div class="pro-tip">
                <h4>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                <p>–í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã –∏–∑—É—á–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API endpoints. –ö–∞–∂–¥—ã–π endpoint –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç!</p>
            </div>

            <h2>üé™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏</h2>
            <p>–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º:</p>
            <pre><code class="language-bash">ghc Main.hs
./Main</code></pre>
        `
    },
    ch2: {
        title: "2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API",
        content: `
            <h1>2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API</h1>
            <p>üéØ <strong>–¶–µ–ª—å:</strong> –ò–∑—É—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ç–∏–ø—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API endpoints</p>
            
            <h2>üîß –§—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –±–ª–æ–∫–∏</h2>
            <p>–ö–∞–∂–¥—ã–π API endpoint - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è:</p>
            <ul>
                <li>–ü—Ä–∏–Ω–∏–º–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å</li>
                <li>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ</li>
                <li>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP –æ—Ç–≤–µ—Ç</li>
            </ul>

            <h3>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞</h3>
            <pre><code class="language-haskell">-- –¢–∏–ø—ã –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type UserId = Int
type ChapterId = String
type Title = String
type Content = String

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–∞–≤—ã
getChapter :: ChapterId -> IO (Maybe Content)
getChapter chapterId = do
    -- –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return $ Just "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥–ª–∞–≤—ã"

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è API endpoint
handleChapterRequest :: ChapterId -> IO String
handleChapterRequest chapterId = do
    maybeContent <- getChapter chapterId
    case maybeContent of
        Just content -> return content
        Nothing -> return "–ì–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"</code></pre>

            <h2>üé® –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π</h2>
            <p>–í Haskell —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:</p>
            
            <pre><code class="language-haskell">-- –¢–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
greetUser :: String -> String
greetUser name = "–ü—Ä–∏–≤–µ—Ç, " ++ name ++ "!"

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è API –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
apiGreeting :: String -> IO String
apiGreeting name = do
    let message = greetUser name
    putStrLn ("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è: " ++ name)
    return message</code></pre>

            <h2>üîÑ –§—É–Ω–∫—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏</h2>
            <p>–§—É–Ω–∫—Ü–∏–∏ –≤ Haskell –∫–∞—Ä—Ä–∏—Ä–æ–≤–∞–Ω—ã - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö —á–∞—Å—Ç–∏—á–Ω–æ:</p>
            
            <pre><code class="language-haskell">-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API
createResponse :: Int -> String -> String -> String
createResponse statusCode message body = 
    "Status: " ++ show statusCode ++ 
    ", Message: " ++ message ++ 
    ", Body: " ++ body

-- –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
successResponse :: String -> String -> String
successResponse = createResponse 200

errorResponse :: String -> String -> String
errorResponse = createResponse 400

-- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
userCreated = successResponse "User created" "{'id': 123}"
invalidData = errorResponse "Invalid data" "{'error': 'missing name'}"</code></pre>

            <h2>üß© –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π</h2>
            <p>–§—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</p>
            
            <pre><code class="language-haskell">-- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
validateUser :: String -> Bool
validateUser name = length name > 0

formatResponse :: String -> String
formatResponse content = "{'data': '" ++ content ++ "'}"

-- –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
processUserData :: String -> String
processUserData name = 
    if validateUser name 
    then formatResponse name
    else "{'error': 'Invalid user name'}"

-- –ò—Å–ø–æ–ª—å–∑—É—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ (.)
upperCaseResponse :: String -> String
upperCaseResponse = formatResponse . map toUpper</code></pre>

            <div class="application-examples">
                <div class="example-card">
                    <h4>üåê –ú–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–æ–≥–∏—è</h4>
                    <p>–§—É–Ω–∫—Ü–∏–∏ –≤ Haskell –ø–æ—Ö–æ–∂–∏ –Ω–∞ <strong>—á–∏—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Redux</strong> - –æ–Ω–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç –¥–∞–Ω–Ω—ã–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–µ–∑ –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.</p>
                </div>
            </div>

            <h2>üèóÔ∏è –°—Ç—Ä–æ–∏–º –ø–µ—Ä–≤—ã–π endpoint</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API:</p>
            
            <pre><code class="language-haskell">-- –¢–∏–ø –¥–ª—è HTTP –º–µ—Ç–æ–¥–∞
data HttpMethod = GET | POST | PUT | DELETE deriving (Show, Eq)

-- –¢–∏–ø –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
data Request = Request 
    { method :: HttpMethod
    , path :: String
    , body :: String
    } deriving (Show)

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
routeRequest :: Request -> IO String
routeRequest req = case (method req, path req) of
    (GET, "/") -> return "Welcome to Haskell Book API!"
    (GET, "/chapters") -> return "List of chapters"
    (GET, path) -> if "/chapter/" \`isPrefixOf\` path
        then return "Chapter content"
        else return "404 Not Found"
    _ -> return "Method not allowed"

            <div class="pro-tip">
                <h4>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                <p>–í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã –∏–∑—É—á–∏–º —Å–ø–∏—Å–∫–∏ –∏ JSON –¥–∞–Ω–Ω—ã–µ. –ù–∞—É—á–∏–º—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ HTTP –∑–∞–ø—Ä–æ—Å–∞—Ö!</p>
            </div>

            <h2>üé™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏</h2>
            <pre><code class="language-haskell">-- –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
handleUser :: String -> String -> String
handleUser action username = 
    "Action: " ++ action ++ ", User: " ++ username

-- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
-- handleUser "create" "john"
-- handleUser "delete" "jane"</code></pre>
        `
    },
    ch3: {
        title: "3. –°–ø–∏—Å–∫–∏ –∏ JSON –¥–∞–Ω–Ω—ã–µ",
        content: `
            <h1>3. –°–ø–∏—Å–∫–∏ –∏ JSON –¥–∞–Ω–Ω—ã–µ</h1>
            <p>üéØ <strong>–¶–µ–ª—å:</strong> –ù–∞—É—á–∏—Ç—å—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API</p>
            
            <h2>üìã –°–ø–∏—Å–∫–∏ - –æ—Å–Ω–æ–≤–∞ –¥–∞–Ω–Ω—ã—Ö API</h2>
            <p>–í –≤–µ–±-API –º—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏:</p>
            <ul>
                <li>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                <li>–°–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –∫–Ω–∏–≥–∏</li>
                <li>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è</li>
            </ul>

            <h3>–†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏</h3>
            <pre><code class="language-haskell">-- –°–ø–∏—Å–æ–∫ –≥–ª–∞–≤
chapters :: [String]
chapters = ["intro", "ch1", "ch2", "ch3"]

-- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users :: [String]
users = ["alice", "bob", "charlie"]

-- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏
firstChapter = head chapters     -- "intro"
restChapters = tail chapters     -- ["ch1", "ch2", "ch3"]
chapterCount = length chapters   -- 4
isEmpty = null chapters          -- False</code></pre>

            <h2>üîÑ –§—É–Ω–∫—Ü–∏–∏ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞</h2>
            <p>–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ - –æ—Å–Ω–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –¥–∞–Ω–Ω—ã—Ö:</p>
            
            <pre><code class="language-haskell">-- map - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç (–∫–∞–∫ –≤ JS/Kotlin)
chapterTitles = map ("Chapter " ++) chapters
-- ["Chapter intro", "Chapter ch1", "Chapter ch2", "Chapter ch3"]

-- filter - —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã
completedChapters = filter (\\ch -> length ch > 3) chapters
-- ["intro"]

-- –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
findChapter :: String -> [String] -> Maybe String
findChapter target list = find (== target) list</code></pre>

            <h2>üèóÔ∏è –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—à–µ–≥–æ API:</p>
            
            <pre><code class="language-haskell">-- –¢–∏–ø –¥–ª—è –≥–ª–∞–≤—ã
data Chapter = Chapter
    { chapterId :: String
    , chapterTitle :: String
    , chapterContent :: String
    , chapterCompleted :: Bool
    } deriving (Show)

-- –¢–∏–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
data User = User
    { userId :: Int
    , userName :: String
    , userProgress :: [String]  -- —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤
    } deriving (Show)

-- –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
sampleChapters :: [Chapter]
sampleChapters = 
    [ Chapter "intro" "–í–≤–µ–¥–µ–Ω–∏–µ" "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–∏—è" False
    , Chapter "ch1" "Hello World" "–ü–µ—Ä–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞" True
    , Chapter "ch2" "–§—É–Ω–∫—Ü–∏–∏" "–ò–∑—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏" False
    ]

sampleUsers :: [User]
sampleUsers = 
    [ User 1 "alice" ["intro", "ch1"]
    , User 2 "bob" ["intro"]
    ]</code></pre>

            <h2>üé® API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API:</p>
            
            <pre><code class="language-haskell">-- –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–ª–∞–≤—ã
getAllChapters :: [Chapter] -> [Chapter]
getAllChapters = id  -- –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –≥–ª–∞–≤—ã

-- –ü–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤—É –ø–æ ID
getChapterById :: String -> [Chapter] -> Maybe Chapter
getChapterById targetId chapters = 
    find (\\ch -> chapterId ch == targetId) chapters

-- –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –≥–ª–∞–≤—ã
getCompletedChapters :: [Chapter] -> [Chapter]
getCompletedChapters = filter chapterCompleted

-- –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
getUserById :: Int -> [User] -> Maybe User
getUserById targetId users = 
    find (\\u -> userId u == targetId) users

-- –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
getUserProgress :: Int -> [User] -> [String]
getUserProgress targetId users = 
    case getUserById targetId users of
        Just user -> userProgress user
        Nothing -> []</code></pre>

            <div class="application-examples">
                <div class="example-card">
                    <h4>üì± –ú–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–æ–≥–∏—è</h4>
                    <p>–§—É–Ω–∫—Ü–∏–∏ map, filter, find –≤ Haskell —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ <strong>Kotlin/Swift collections</strong>. –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ç–æ–º, —á—Ç–æ –æ–Ω–∏ —á–∏—Å—Ç—ã–µ –∏ –∏–º–º—É—Ç–∞–±–µ–ª—å–Ω—ã–µ!</p>
                </div>
            </div>

            <h2>üîó –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
            <p>–û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏:</p>
            
            <pre><code class="language-haskell">-- –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –≥–ª–∞–≤
getIncompleteChapterTitles :: [Chapter] -> [String]
getIncompleteChapterTitles chapters = 
    map chapterTitle $           -- –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    filter (not . chapterCompleted) $  -- –±–µ—Ä–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
    chapters

-- –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
getUserStats :: Int -> [User] -> [Chapter] -> String
getUserStats targetId users chapters = 
    let userChapters = getUserProgress targetId users
        totalChapters = length chapters
        completedCount = length userChapters
    in "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª " ++ show completedCount ++ 
       " –∏–∑ " ++ show totalChapters ++ " –≥–ª–∞–≤"</code></pre>

            <h2>üé™ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∞–º–∏</h2>
            <p>–ü–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏:</p>
            
            <pre><code class="language-haskell">-- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
map (*2) [1, 2, 3, 4]
filter even [1, 2, 3, 4, 5, 6]
length [1, 2, 3]
head [1, 2, 3]
tail [1, 2, 3]
[1, 2] ++ [3, 4]</code></pre>

            <div class="pro-tip">
                <h4>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                <p>–í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã –∏–∑—É—á–∏–º IO –∏ –º–æ–Ω–∞–¥—ã. –ù–∞—É—á–∏–º—Å—è –¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª—ã!</p>
            </div>
        `
    },
    ch4: {
        title: "4. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ guard-–≤—ã—Ä–∞–∂–µ–Ω–∏—è",
        content: `
            <h1>4. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ –∏ guard-–≤—ã—Ä–∞–∂–µ–Ω–∏—è</h1>
            <h2>–ü–∞—Ç—Ç–µ—Ä–Ω-–º–∞—Ç—á–∏–Ω–≥</h2>
            <pre><code class="language-haskell">-- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
describe :: Int -> String
describe 0 = "Zero"
describe 1 = "One"
describe n = "Other number"</code></pre>
            <h2>Guard-–≤—ã—Ä–∞–∂–µ–Ω–∏—è</h2>
            <pre><code class="language-haskell">-- Guard-–≤—ã—Ä–∞–∂–µ–Ω–∏—è
grade :: Int -> String
grade score
    | score >= 90 = "A"
    | score >= 80 = "B"
    | score >= 70 = "C"
    | otherwise   = "F"</code></pre>
        `
    },
    ch5: {
        title: "5. –ú–æ–¥—É–ª–∏ –∏ –∏–º–ø–æ—Ä—Ç",
        content: `
            <h1>5. –ú–æ–¥—É–ª–∏ –∏ –∏–º–ø–æ—Ä—Ç</h1>
            <h2>–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π</h2>
            <pre><code class="language-haskell">-- –ò–º–ø–æ—Ä—Ç –≤—Å–µ–≥–æ –º–æ–¥—É–ª—è
import Data.List

-- –ò–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
import Data.List (sort, reverse)

-- –ò–º–ø–æ—Ä—Ç —Å –∞–ª–∏–∞—Å–æ–º
import qualified Data.Map as Map</code></pre>
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π</h2>
            <pre><code class="language-haskell">-- MyModule.hs
module MyModule (myFunction, MyType) where

myFunction :: Int -> Int
myFunction x = x * 2</code></pre>
        `
    },
    ch6: {
        title: "6. –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
        content: `
            <h1>6. –ò–º–º—É—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å</h1>
            <ul>
                <li>–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–∞–∫ –≤ val –∏–∑ Kotlin –∏–ª–∏ let –≤ Swift</li>
                <li>–ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã ‚Äî –≤—Ä–∞–≥ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏</li>
            </ul>
            <h2>–ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</h2>
            <p>–í Haskell –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –µ–≥–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.</p>
            <pre><code class="language-haskell">-- –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã
x = 42
-- x = 43  -- –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏!

-- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
numbers = [1, 2, 3]
moreNumbers = 0 : numbers  -- [0, 1, 2, 3]
-- numbers –æ—Å—Ç–∞–µ—Ç—Å—è [1, 2, 3]</code></pre>
        `
    },
    ch7: {
        title: "7. –ü–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä",
        content: `
            <h1>7. –ü–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä</h1>
            <p>üéØ <strong>–¶–µ–ª—å:</strong> –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π HTTP —Å–µ—Ä–≤–µ—Ä –Ω–∞ Haskell</p>
            
            <h2>üöÄ –ú–æ–º–µ–Ω—Ç –∏—Å—Ç–∏–Ω—ã!</h2>
            <p>–ü–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä! –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É <strong>Scotty</strong> - –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Haskell.</p>

            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞</h3>
            <p>–°–æ–∑–¥–∞–¥–∏–º cabal –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–±–∞–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:</p>
            
            <pre><code class="language-bash"># –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
mkdir haskell-book-server
cd haskell-book-server
cabal init --simple</code></pre>

            <h3>–§–∞–π–ª cabal –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
            <pre><code class="language-cabal">name: haskell-book-server
version: 0.1.0.0
build-type: Simple

executable haskell-book-server
    main-is: Main.hs
    build-depends: 
        base >=4.7 && <5,
        scotty,
        text,
        aeson,
        wai-cors
    default-language: Haskell2010</code></pre>

            <h2>üì° –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä</h2>
            <p>–ù–∞—à –ø–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Å API –¥–ª—è –∫–Ω–∏–≥–∏:</p>
            
            <pre><code class="language-haskell">{-# LANGUAGE OverloadedStrings #-}
module Main where

import Web.Scotty
import Data.Text.Lazy (Text)
import qualified Data.Text.Lazy as T
import Network.Wai.Middleware.Cors

-- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main :: IO ()
main = do
    putStrLn "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Haskell Book Server..."
    putStrLn "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8080"
    scotty 8080 $ do
        -- –í–∫–ª—é—á–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        middleware $ cors $ const $ Just simpleCorsResourcePolicy
        
        -- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        get "/" $ do
            html "Welcome to Haskell Book API!"
        
        -- API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≥–ª–∞–≤
        get "/api/chapters" $ do
            json allChapters
        
        -- API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–ª–∞–≤—ã
        get "/api/chapters/:id" $ do
            chapterId <- param "id"
            case findChapter chapterId allChapters of
                Just chapter -> json chapter
                Nothing -> do
                    status notFound404
                    json ("Chapter not found" :: Text)
        
        -- API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        get "/api/progress" $ do
            json userProgress</code></pre>

            <h2>üóÑÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è API</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—à–µ–≥–æ API:</p>
            
            <pre><code class="language-haskell">{-# LANGUAGE DeriveGeneric #-}
import GHC.Generics
import Data.Aeson

-- –¢–∏–ø –¥–ª—è –≥–ª–∞–≤—ã
data Chapter = Chapter
    { chapterId :: String
    , chapterTitle :: String
    , chapterContent :: String
    , chapterCompleted :: Bool
    } deriving (Show, Generic)

-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
instance ToJSON Chapter
instance FromJSON Chapter

-- –¢–∏–ø –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
data Progress = Progress
    { completedChapters :: [String]
    , totalChapters :: Int
    , progressPercentage :: Float
    } deriving (Show, Generic)

instance ToJSON Progress
instance FromJSON Progress</code></pre>

            <h2>üìö –î–∞–Ω–Ω—ã–µ –≥–ª–∞–≤</h2>
            <p>–°–æ–∑–¥–∞–¥–∏–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤ –¥–ª—è –Ω–∞—à–µ–≥–æ API:</p>
            
            <pre><code class="language-haskell">-- –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–ª–∞–≤
allChapters :: [Chapter]
allChapters = 
    [ Chapter "intro" "–í–≤–µ–¥–µ–Ω–∏–µ" "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Haskell" False
    , Chapter "ch1" "Hello, Web Server" "–ü–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä" True
    , Chapter "ch2" "–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è API" "–ò–∑—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏" False
    , Chapter "ch3" "–°–ø–∏—Å–∫–∏ –∏ JSON" "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏" False
    , Chapter "ch7" "–ü–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä" "–°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä–≤–µ—Ä" False
    ]

-- –ü–æ–∏—Å–∫ –≥–ª–∞–≤—ã –ø–æ ID
findChapter :: String -> [Chapter] -> Maybe Chapter
findChapter targetId chapters = 
    find (\ch -> chapterId ch == targetId) chapters

-- –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–≥–ª—É—à–∫–∞)
userProgress :: Progress
userProgress = Progress
    { completedChapters = ["intro", "ch1"]
    , totalChapters = length allChapters
    , progressPercentage = 40.0
    }</code></pre>

            <div class="application-examples">
                <div class="example-card">
                    <h4>üåê –ú–æ–±–∏–ª—å–Ω–∞—è –∞–Ω–∞–ª–æ–≥–∏—è</h4>
                    <p>–≠—Ç–æ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ <strong>backend –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</strong>. API endpoints –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç JSON –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±–æ–π –∫–ª–∏–µ–Ω—Ç!</p>
                </div>
            </div>

            <h2>üé™ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä</h2>
            <p>–£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏–º:</p>
            
            <pre><code class="language-bash"># –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
cabal build

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
cabal run

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:
curl http://localhost:8080/api/chapters
curl http://localhost:8080/api/chapters/intro
curl http://localhost:8080/api/progress</code></pre>

            <h2>üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API</h2>
            <p>–ù–∞—à —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã:</p>
            
            <ul>
                <li><code>GET /</code> - –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</li>
                <li><code>GET /api/chapters</code> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–ª–∞–≤</li>
                <li><code>GET /api/chapters/:id</code> - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≥–ª–∞–≤–∞</li>
                <li><code>GET /api/progress</code> - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
            </ul>

            <div class="pro-tip">
                <h4>üí° –ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                <p>–í —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤–µ –º—ã –¥–æ–±–∞–≤–∏–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π REST API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π POST, PUT –∏ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤!</p>
            </div>

            <div class="call-to-action">
                <h3>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h3>
                <p>–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Haskell! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—â–∏–π HTTP —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å API –∑–∞–ø—Ä–æ—Å—ã.</p>
            </div>
        `
    },
    ch8: {
        title: "8. –ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (ADT)",
        content: `
            <h1>8. –ê–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö (ADT)</h1>
            <ul>
                <li>data, type, newtype</li>
                <li>–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã: data Result = Ok Int | Error String</li>
                <li>–ê–Ω–∞–ª–æ–≥–∏—è —Å sealed class –≤ Kotlin</li>
            </ul>
            <h2>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤</h2>
            <pre><code class="language-haskell">-- –ü—Ä–æ—Å—Ç–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
data Color = Red | Green | Blue

-- –¢–∏–ø —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
data Point = Point Double Double

-- –¢–∏–ø —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏
data Shape = Circle Double | Rectangle Double Double</code></pre>
            <h2>Maybe –∏ Either</h2>
            <pre><code class="language-haskell">-- Maybe –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
data Maybe a = Nothing | Just a

-- Either –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏
data Either a b = Left a | Right b</code></pre>
        `
    },
    ch9: {
        title: "9. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ",
        content: `
            <h1>9. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ</h1>
            <ul>
                <li>Functor, Applicative, Monad: –∑–∞—á–µ–º –∏ –∫–∞–∫</li>
                <li>–ê–Ω–∞–ª–æ–≥–∏—è —Å RxSwift, Flow, Coroutines</li>
            </ul>
            <h2>Functor</h2>
            <pre><code class="language-haskell">-- Functor –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
fmap :: (a -> b) -> f a -> f b

-- –ü—Ä–∏–º–µ—Ä—ã
fmap (+1) (Just 5)     -- Just 6
fmap (*2) [1, 2, 3]    -- [2, 4, 6]</code></pre>
            <h2>Monad</h2>
            <pre><code class="language-haskell">-- Monad –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
return :: a -> m a
(>>=) :: m a -> (a -> m b) -> m b</code></pre>
        `
    },
    ch10: {
        title: "10. IO –∏ —á–∏—Å—Ç–æ—Ç–∞",
        content: `
            <h1>10. IO –∏ —á–∏—Å—Ç–æ—Ç–∞</h1>
            <ul>
                <li>–ü–æ—á–µ–º—É IO ‚Äî –æ—Å–æ–±–µ–Ω–Ω—ã–π</li>
                <li>–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–Ω—Å–æ–ª—å—é</li>
                <li>–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –∫–∞–∫ —ç—Ñ—Ñ–µ–∫—Ç—ã</li>
            </ul>
            <h2>IO-–æ–ø–µ—Ä–∞—Ü–∏–∏</h2>
            <pre><code class="language-haskell">-- –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
main :: IO ()
main = do
    putStrLn "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    name <- getLine
    putStrLn ("–ü—Ä–∏–≤–µ—Ç, " ++ name ++ "!")

-- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
readFileContent :: FilePath -> IO String
readFileContent path = readFile path</code></pre>
        `
    },
    ch11: {
        title: "11. –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è",
        content: `
            <h1>11. –ü–∞—Ä—Å–∏–Ω–≥ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è</h1>
            <ul>
                <li>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ aeson</li>
                <li>JSON-–ø–∞—Ä—Å–∏–Ω–≥: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å Gson/Moshi/Swift Codable</li>
            </ul>
            <h2>–†–∞–±–æ—Ç–∞ —Å JSON</h2>
            <pre><code class="language-haskell">-- –ü—Ä–∏–º–µ—Ä —Å aeson
{-# LANGUAGE DeriveGeneric #-}
import GHC.Generics
import Data.Aeson

data Person = Person
    { name :: String
    , age :: Int
    } deriving (Generic, Show)

instance ToJSON Person
instance FromJSON Person</code></pre>
        `
    },
    ch12: {
        title: "12. –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è CLI",
        content: `
            <h1>12. –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è CLI</h1>
            <ul>
                <li>TODO manager –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ</li>
                <li>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞</li>
                <li>–ß—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å JSON</li>
            </ul>
            <h2>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
            <pre><code class="language-haskell">-- Main.hs
module Main where

import System.Environment
import Data.Aeson
import qualified Data.ByteString.Lazy as B

data Task = Task
    { taskId :: Int
    , taskText :: String
    , taskDone :: Bool
    } deriving (Show, Generic)

instance ToJSON Task
instance FromJSON Task

main :: IO ()
main = do
    args <- getArgs
    case args of
        ["add", task] -> addTask task
        ["list"] -> listTasks
        ["done", taskId] -> markDone (read taskId)
        _ -> putStrLn "Usage: todo [add|list|done]"</code></pre>
        `
    },
    ch13: {
        title: "13. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Haskell —Å –º–æ–±–∏–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π",
        content: `
            <h1>13. –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Haskell —Å –º–æ–±–∏–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π</h1>
            <ul>
                <li>–ß—Ç–æ —Ç–∞–∫–æ–µ GHCJS –∏ Haskell-to-JS</li>
                <li>Haskell –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ª–æ–≥–∏–∫–∏</li>
                <li>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å shared-–º–æ–¥—É–ª–∏</li>
            </ul>
            <h2>GHCJS</h2>
            <p>GHCJS –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç Haskell –∫–æ–¥ –≤ JavaScript, –ø–æ–∑–≤–æ–ª—è—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Haskell –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.</p>
            <h2>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞</h2>
            <p>Haskell –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –µ–¥–∏–Ω—É—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É.</p>
        `
    },
    ch14: {
        title: "14. FRP (Functional Reactive Programming)",
        content: `
            <h1>14. FRP (Functional Reactive Programming)</h1>
            <ul>
                <li>–ß—Ç–æ —Ç–∞–∫–æ–µ FRP</li>
                <li>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å RxSwift –∏ Kotlin Flow</li>
                <li>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏: reflex, reactive-banana</li>
            </ul>
            <h2>–û—Å–Ω–æ–≤—ã FRP</h2>
            <p>FRP ‚Äî —ç—Ç–æ –ø–∞—Ä–∞–¥–∏–≥–º–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.</p>
            <h2>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏</h2>
            <p>FRP –≤ Haskell –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ RxSwift –≤ iOS –∏ Kotlin Flow –≤ Android ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏.</p>
        `
    },
    ch15: {
        title: "15. –ì–¥–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å Haskell?",
        content: `
            <h1>15. –ì–¥–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å Haskell?</h1>
            <ul>
                <li>–ü–∞—Ä—Å–µ—Ä—ã, –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã, –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –ª–æ–≥–∏–∫–∏</li>
                <li>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è CI/CD –∏ DevOps</li>
                <li>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–¥–∞ –∏ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–¥–∞</li>
            </ul>
            <h2>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</h2>
            <p>Haskell –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∑–∞–¥–∞—á, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤—ã—Å–æ–∫–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏:</p>
            <ul>
                <li>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã</li>
                <li>–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è</li>
                <li>–°–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</li>
                <li>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</li>
            </ul>
        `
    },
    ch16: {
        title: "16. –†–µ—Å—É—Ä—Å—ã",
        content: `
            <h1>16. –†–µ—Å—É—Ä—Å—ã</h1>
            <ul>
                <li>–ö–Ω–∏–≥–∏: "Learn You a Haskell", "Real World Haskell"</li>
                <li>–ö—É—Ä—Å—ã: Haskell MOOC, Exercism</li>
                <li>–ü—Ä–∞–∫—Ç–∏–∫–∞: Advent of Code, Codewars</li>
            </ul>
            <h2>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</h2>
            <h3>–ö–Ω–∏–≥–∏</h3>
            <ul>
                <li><strong>Learn You a Haskell for Great Good!</strong> ‚Äî –æ—Ç–ª–∏—á–Ω–∞—è –∫–Ω–∏–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö</li>
                <li><strong>Real World Haskell</strong> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è</li>
                <li><strong>Haskell Programming from First Principles</strong> ‚Äî –≥–ª—É–±–æ–∫–æ–µ –∏–∑—É—á–µ–Ω–∏–µ</li>
            </ul>
            <h3>–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã</h3>
            <ul>
                <li><strong>Haskell MOOC</strong> ‚Äî University of Helsinki</li>
                <li><strong>Exercism</strong> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è</li>
            </ul>
            <h3>–î–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏</h3>
            <ul>
                <li><strong>Advent of Code</strong> ‚Äî –µ–∂–µ–≥–æ–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</li>
                <li><strong>Codewars</strong> ‚Äî –∑–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</li>
            </ul>
        `
    }
};

// App state
let currentChapter = 'intro';
let progress = JSON.parse(localStorage.getItem('haskell-progress') || '{}');
let bookmarks = JSON.parse(localStorage.getItem('haskell-bookmarks') || '[]');

// Chapter order
const chapterOrder = ['intro', 'ch1', 'ch2', 'ch3', 'ch4', 'ch5', 'ch6', 'ch7', 'ch8', 'ch9', 'ch10', 'ch11', 'ch12', 'ch13', 'ch14', 'ch15', 'ch16'];

// DOM elements
const sidebar = document.querySelector('.sidebar');
const menuToggle = document.getElementById('menu-toggle');
const chapterContent = document.getElementById('chapter-content');
const prevBtn = document.getElementById('prev-btn');
const nextBtn = document.getElementById('next-btn');
const completeBtn = document.getElementById('complete-btn');
const bookmarkBtn = document.getElementById('bookmark-btn');
const progressFill = document.getElementById('overall-progress');
const progressText = document.getElementById('progress-text');

// Initialize app
document.addEventListener('DOMContentLoaded', () => {
    loadChapter(currentChapter);
    updateProgress();
    updateNavigationButtons();
    bindEvents();
});

// Load chapter content
function loadChapter(chapterId) {
    const chapter = chapters[chapterId];
    if (!chapter) return;

    currentChapter = chapterId;
    chapterContent.innerHTML = chapter.content;

    // Update active navigation item
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    document.querySelector(`[data-chapter="${chapterId}"]`).classList.add('active');

    // Update action buttons
    updateActionButtons();
    updateNavigationButtons();

    // Close mobile menu
    sidebar.classList.remove('open');

    // Scroll to top
    window.scrollTo(0, 0);

    // Re-highlight syntax with Prism.js
    if (typeof Prism !== 'undefined') {
        Prism.highlightAll();
    }

    // Add "Try" buttons to code examples
    addTryButtons();
}

// Update action buttons
function updateActionButtons() {
    const isCompleted = progress[currentChapter];
    const isBookmarked = bookmarks.includes(currentChapter);

    completeBtn.classList.toggle('completed', isCompleted);
    completeBtn.innerHTML = isCompleted
        ? '<i class="fas fa-check"></i> –ò–∑—É—á–µ–Ω–æ'
        : '<i class="fas fa-check"></i> –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω–æ–µ';

    bookmarkBtn.classList.toggle('bookmarked', isBookmarked);
    bookmarkBtn.innerHTML = isBookmarked
        ? '<i class="fas fa-bookmark"></i> –£–±—Ä–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫—É'
        : '<i class="fas fa-bookmark"></i> –ó–∞–∫–ª–∞–¥–∫–∞';
}

// Update navigation buttons
function updateNavigationButtons() {
    const currentIndex = chapterOrder.indexOf(currentChapter);

    prevBtn.disabled = currentIndex === 0;
    nextBtn.disabled = currentIndex === chapterOrder.length - 1;
}

// Update progress
function updateProgress() {
    const completedCount = Object.keys(progress).filter(key => progress[key]).length;
    const totalCount = chapterOrder.length;
    const percentage = (completedCount / totalCount) * 100;

    progressFill.style.width = `${percentage}%`;
    progressText.textContent = `${completedCount} / ${totalCount} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;

    // Update chapter status indicators
    chapterOrder.forEach(chapterId => {
        const statusElement = document.getElementById(`status-${chapterId}`);
        if (statusElement) {
            statusElement.classList.remove('completed', 'bookmarked');
            if (progress[chapterId]) {
                statusElement.classList.add('completed');
            } else if (bookmarks.includes(chapterId)) {
                statusElement.classList.add('bookmarked');
            }
        }
    });
}

// Save progress
function saveProgress() {
    localStorage.setItem('haskell-progress', JSON.stringify(progress));
    localStorage.setItem('haskell-bookmarks', JSON.stringify(bookmarks));
}

// Bind events
function bindEvents() {
    // Menu toggle
    menuToggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
        if (!sidebar.contains(e.target) && !menuToggle.contains(e.target)) {
            sidebar.classList.remove('open');
        }
    });

    // Navigation items
    document.querySelectorAll('.nav-item').forEach(item => {
        item.addEventListener('click', () => {
            const chapterId = item.dataset.chapter;
            loadChapter(chapterId);
        });
    });

    // Navigation buttons
    prevBtn.addEventListener('click', () => {
        const currentIndex = chapterOrder.indexOf(currentChapter);
        if (currentIndex > 0) {
            loadChapter(chapterOrder[currentIndex - 1]);
        }
    });

    nextBtn.addEventListener('click', () => {
        const currentIndex = chapterOrder.indexOf(currentChapter);
        if (currentIndex < chapterOrder.length - 1) {
            loadChapter(chapterOrder[currentIndex + 1]);
        }
    });

    // Complete button
    completeBtn.addEventListener('click', () => {
        progress[currentChapter] = !progress[currentChapter];
        updateProgress();
        updateActionButtons();
        saveProgress();
    });

    // Bookmark button
    bookmarkBtn.addEventListener('click', () => {
        const index = bookmarks.indexOf(currentChapter);
        if (index > -1) {
            bookmarks.splice(index, 1);
        } else {
            bookmarks.push(currentChapter);
        }
        updateProgress();
        updateActionButtons();
        saveProgress();
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

        switch (e.key) {
            case 'ArrowLeft':
                if (!prevBtn.disabled) {
                    prevBtn.click();
                }
                break;
            case 'ArrowRight':
                if (!nextBtn.disabled) {
                    nextBtn.click();
                }
                break;
            case ' ':
                e.preventDefault();
                completeBtn.click();
                break;
            case 'b':
                bookmarkBtn.click();
                break;
        }
    });
}

// Handle window resize
window.addEventListener('resize', () => {
    if (window.innerWidth > 768) {
        sidebar.classList.remove('open');
    }
});

// Interactive REPL functionality
class HaskellREPL {
    constructor() {
        this.history = [];
        this.initializeREPL();
    }

    initializeREPL() {
        const replToggle = document.getElementById('repl-toggle');
        const replContainer = document.getElementById('repl-container');
        const replInput = document.getElementById('repl-input');
        const replSubmit = document.getElementById('repl-submit');
        const replClear = document.getElementById('repl-clear');
        const replHelp = document.getElementById('repl-help');

        // Toggle REPL visibility
        replToggle.addEventListener('click', () => {
            replContainer.classList.toggle('active');
            const isActive = replContainer.classList.contains('active');
            replToggle.innerHTML = isActive
                ? '<i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å REPL'
                : '<i class="fas fa-code"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–¥';
        });

        // Submit expression
        const submitExpression = () => {
            const expression = replInput.value.trim();
            if (expression) {
                this.evaluateExpression(expression);
                replInput.value = '';
            }
        };

        replSubmit.addEventListener('click', submitExpression);
        replInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                submitExpression();
            }
        });

        // Clear output
        replClear.addEventListener('click', () => {
            const replOutput = document.getElementById('repl-output');
            replOutput.innerHTML = `
                <div class="repl-welcome">
                    <p>üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π Haskell REPL!</p>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏: <code>2 + 3</code> –∏–ª–∏ <code>map (*2) [1,2,3]</code></p>
                </div>
            `;
            this.history = [];
        });

        // Show help
        replHelp.addEventListener('click', () => {
            this.showHelp();
        });
    }

    evaluateExpression(expr) {
        const replOutput = document.getElementById('repl-output');

        // Add command to output
        const commandDiv = document.createElement('div');
        commandDiv.className = 'repl-entry';
        commandDiv.innerHTML = `
            <div class="repl-command">
                <span class="repl-prompt">ghci&gt;</span>
                <span>${this.escapeHtml(expr)}</span>
            </div>
        `;
        replOutput.appendChild(commandDiv);

        try {
            const result = this.evaluate(expr);
            const resultDiv = document.createElement('div');
            resultDiv.className = 'repl-result';
            resultDiv.textContent = result;
            replOutput.appendChild(resultDiv);
        } catch (error) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'repl-error';
            errorDiv.textContent = `Error: ${error.message}`;
            replOutput.appendChild(errorDiv);
        }

        // Auto-scroll to bottom
        replOutput.scrollTop = replOutput.scrollHeight;
        this.history.push(expr);
    }

    evaluate(expr) {
        // Simple Haskell expression evaluator
        expr = expr.trim();

        // Handle basic arithmetic
        if (/^\d+\s*[\+\-\*\/]\s*\d+$/.test(expr)) {
            return eval(expr).toString();
        }

        // Handle lists
        if (expr.match(/^\[[\d,\s]*\]$/)) {
            return expr;
        }

        // Handle simple function applications
        if (expr.includes('map')) {
            return this.evaluateMap(expr);
        }

        if (expr.includes('filter')) {
            return this.evaluateFilter(expr);
        }

        if (expr.includes('length')) {
            return this.evaluateLength(expr);
        }

        if (expr.includes('head')) {
            return this.evaluateHead(expr);
        }

        if (expr.includes('tail')) {
            return this.evaluateTail(expr);
        }

        // Handle basic values
        if (/^\d+$/.test(expr)) {
            return expr;
        }

        if (expr === 'True' || expr === 'False') {
            return expr;
        }

        if (expr.startsWith('"') && expr.endsWith('"')) {
            return expr;
        }

        // Handle simple expressions
        if (expr.includes('++')) {
            return this.evaluateConcat(expr);
        }

        // Default case
        throw new Error('Expression not supported in this simple REPL');
    }

    evaluateMap(expr) {
        // Simple map implementation: map (*2) [1,2,3]
        const mapMatch = expr.match(/map\s*\(\*(\d+)\)\s*(\[[\d,\s]*\])/);
        if (mapMatch) {
            const multiplier = parseInt(mapMatch[1]);
            const list = JSON.parse(mapMatch[2].replace(/\s/g, ''));
            const result = list.map(x => x * multiplier);
            return `[${result.join(',')}]`;
        }

        const mapAdd = expr.match(/map\s*\(\+(\d+)\)\s*(\[[\d,\s]*\])/);
        if (mapAdd) {
            const addend = parseInt(mapAdd[1]);
            const list = JSON.parse(mapAdd[2].replace(/\s/g, ''));
            const result = list.map(x => x + addend);
            return `[${result.join(',')}]`;
        }

        return 'map: function not fully implemented';
    }

    evaluateFilter(expr) {
        // Simple filter implementation: filter even [1,2,3,4]
        const evenMatch = expr.match(/filter\s+even\s*(\[[\d,\s]*\])/);
        if (evenMatch) {
            const list = JSON.parse(evenMatch[1].replace(/\s/g, ''));
            const result = list.filter(x => x % 2 === 0);
            return `[${result.join(',')}]`;
        }

        const oddMatch = expr.match(/filter\s+odd\s*(\[[\d,\s]*\])/);
        if (oddMatch) {
            const list = JSON.parse(oddMatch[1].replace(/\s/g, ''));
            const result = list.filter(x => x % 2 === 1);
            return `[${result.join(',')}]`;
        }

        return 'filter: function not fully implemented';
    }

    evaluateLength(expr) {
        const lengthMatch = expr.match(/length\s*(\[[\d,\s]*\])/);
        if (lengthMatch) {
            const list = JSON.parse(lengthMatch[1].replace(/\s/g, ''));
            return list.length.toString();
        }
        return 'length: invalid list';
    }

    evaluateHead(expr) {
        const headMatch = expr.match(/head\s*(\[[\d,\s]*\])/);
        if (headMatch) {
            const list = JSON.parse(headMatch[1].replace(/\s/g, ''));
            if (list.length === 0) throw new Error('empty list');
            return list[0].toString();
        }
        return 'head: invalid list';
    }

    evaluateTail(expr) {
        const tailMatch = expr.match(/tail\s*(\[[\d,\s]*\])/);
        if (tailMatch) {
            const list = JSON.parse(tailMatch[1].replace(/\s/g, ''));
            if (list.length === 0) throw new Error('empty list');
            const result = list.slice(1);
            return `[${result.join(',')}]`;
        }
        return 'tail: invalid list';
    }

    evaluateConcat(expr) {
        const concatMatch = expr.match(/(\[[\d,\s]*\])\s*\+\+\s*(\[[\d,\s]*\])/);
        if (concatMatch) {
            const list1 = JSON.parse(concatMatch[1].replace(/\s/g, ''));
            const list2 = JSON.parse(concatMatch[2].replace(/\s/g, ''));
            const result = list1.concat(list2);
            return `[${result.join(',')}]`;
        }
        return '++: invalid lists';
    }

    showHelp() {
        const replOutput = document.getElementById('repl-output');
        const helpDiv = document.createElement('div');
        helpDiv.className = 'repl-entry';
        helpDiv.innerHTML = `
            <div class="repl-welcome">
                <p><strong>üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</strong></p>
                <p><code>2 + 3</code> - –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</p>
                <p><code>[1,2,3]</code> - –°–ø–∏—Å–∫–∏</p>
                <p><code>map (*2) [1,2,3]</code> - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫ —Å–ø–∏—Å–∫—É</p>
                <p><code>filter even [1,2,3,4]</code> - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞</p>
                <p><code>length [1,2,3]</code> - –î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–∞</p>
                <p><code>head [1,2,3]</code> - –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç</p>
                <p><code>tail [1,2,3]</code> - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ</p>
                <p><code>[1,2] ++ [3,4]</code> - –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤</p>
            </div>
        `;
        replOutput.appendChild(helpDiv);
        replOutput.scrollTop = replOutput.scrollHeight;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Add interactive "Try" buttons to code examples
function addTryButtons() {
    const codeBlocks = document.querySelectorAll('pre code.language-haskell');

    codeBlocks.forEach((codeBlock, index) => {
        const pre = codeBlock.parentElement;

        // Skip if button already exists
        if (pre.querySelector('.try-code-btn')) return;

        const code = codeBlock.textContent.trim();

        // Only add button for simple, executable expressions
        const isExecutable = isExecutableCode(code);

        if (isExecutable) {
            const wrapper = document.createElement('div');
            wrapper.className = 'code-example-wrapper';

            pre.parentNode.insertBefore(wrapper, pre);
            wrapper.appendChild(pre);

            const tryButton = document.createElement('button');
            tryButton.className = 'try-code-btn';
            tryButton.innerHTML = '<i class="fas fa-play"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å';
            tryButton.onclick = () => tryCode(getExecutableExpression(code));

            wrapper.appendChild(tryButton);
        }
    });
}

function isExecutableCode(code) {
    // Remove comments and extra whitespace
    const cleanCode = code.replace(/--.*$/gm, '').trim();

    // Check for simple expressions that can be executed
    const executablePatterns = [
        /^\d+\s*[\+\-\*\/]\s*\d+/,  // Arithmetic
        /^map\s*\(/,                 // map functions
        /^filter\s+/,                // filter functions
        /^length\s+/,                // length function
        /^head\s+/,                  // head function
        /^tail\s+/,                  // tail function
        /^\[[\d,\s]*\]\s*\+\+/,     // list concatenation
        /^\[[\d,\s]*\]$/,           // simple lists
        /^\d+$/,                     // numbers
        /^True|False$/               // booleans
    ];

    return executablePatterns.some(pattern => pattern.test(cleanCode));
}

function getExecutableExpression(code) {
    // Extract the first executable line from code
    const lines = code.split('\n');

    for (const line of lines) {
        const cleanLine = line.replace(/--.*$/, '').trim();
        if (cleanLine && !cleanLine.startsWith('--') && isExecutableCode(cleanLine)) {
            return cleanLine;
        }
    }

    return code.trim();
}

function tryCode(expression) {
    // Open REPL if not already open
    const replContainer = document.getElementById('repl-container');
    const replToggle = document.getElementById('repl-toggle');

    if (!replContainer.classList.contains('active')) {
        replContainer.classList.add('active');
        replToggle.innerHTML = '<i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å REPL';
    }

    // Fill input and focus
    const replInput = document.getElementById('repl-input');
    replInput.value = expression;
    replInput.focus();

    // Scroll to REPL
    document.getElementById('repl-section').scrollIntoView({
        behavior: 'smooth',
        block: 'nearest'
    });

    // Highlight the input briefly
    replInput.style.background = 'rgba(59, 130, 246, 0.2)';
    setTimeout(() => {
        replInput.style.background = 'transparent';
    }, 1000);
}

// Initialize REPL when page loads
document.addEventListener('DOMContentLoaded', () => {
    new HaskellREPL();
}); 